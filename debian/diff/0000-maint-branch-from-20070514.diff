commit 4a1bb4c3f87f355dd52fcd0babcbd005d59d7ed6
Author: Eric Wong <normalperson@yhbt.net>
Date:   Sun May 13 09:58:14 2007 -0700

    git-svn: don't attempt to minimize URLs by default
    
    For tracking branches and tags, git-svn prefers to connect
    to the root of the repository or at least the level that
    houses branches and tags as well as trunk.  However, users
    that are accustomed to tracking a single directory have
    no use for this feature.
    
    As pointed out by Junio, users may not have permissions to
    connect to connect to a higher-level path in the repository.
    
    While the current minimize_url() function detects lack of
    permissions to certain paths _after_ successful logins, it
    cannot effectively determine if it is trying to access a
    login-only portion of a repo when the user expects to
    connect to a part where anonymous access is allowed.
    
    For people used to the git-svnimport switches of
    --trunk, --tags, --branches, they'll already pass the
    repository root (or root+subdirectory), so minimize URL
    isn't of too much use to them, either.
    
    For people *not* used to git-svnimport, git-svn also
    supports:
    
     git svn init --minimize-url \
      --trunk http://repository-root/foo/trunk \
      --branches http://repository-root/foo/branches \
      --tags http://repository-root/foo/tags
    
    And this is where the new --minimize-url command-line switch
    comes in to allow for this behavior to continue working.

commit 4c03c3eb4e31c2d1f88ca0c7106c647a246e81ff
Author: Eric Wong <normalperson@yhbt.net>
Date:   Sun May 13 01:04:44 2007 -0700

    git-svn: fix segfaults due to initial SVN pool being cleared
    
    Some parts of SVN always seem to use it, even if the SVN::Ra
    object we're using is no longer used and we've created a new one
    in its place.  It's also true that only one SVN::Ra connection
    can exist at once...  Using SVN::Pool->new_default when the
    SVN::Ra object is created doesn't seem to help very much,
    either...
    
    Hopefully this fixes all segfault problems users have been
    experiencing over the past few months.
    
    Signed-off-by: Eric Wong <normalperson@yhbt.net>

commit 0dc03d6a30213e9aa0eb88886cee24b993a24a29
Author: Eric Wong <normalperson@yhbt.net>
Date:   Sun May 13 01:04:43 2007 -0700

    git-svn: clean up caching of SVN::Ra functions
    
    This patch was originally intended to make the Perl GC more
    sensitive to the SVN::Pool objects and not accidentally clean
    them up when they shouldn't be (causing segfaults).  That didn't
    work, but this patch makes the code a bit cleaner regardless
    
    Put our caches for get_dir and check_path calls directly into
    the SVN::Ra object so they auto-expire when it is destroyed.
    
    dirents returned by get_dir() no longer needs the pool object
    stored persistently along with the cache data, as they'll be
    converted to native Perl hash references.
    
    Since calling rev_proplist repeatedly per-revision is no longer
    needed in git-svn, we do not cache calls to it.
    
    Signed-off-by: Eric Wong <normalperson@yhbt.net>

commit 645833b564f585a25acd75c878ffda752909c273
Author: Eric Wong <normalperson@yhbt.net>
Date:   Sat May 12 14:36:20 2007 -0700

    git-svn: don't drop the username from URLs when dcommit is run
    
    We no longer store usernames in URLs stored in git-svn-id lines
    for dcommit, so we shouldn't rely on those URLs when connecting
    to the remote repository to commit.

commit b24dd51bf6102f5341d4753fad8ff73413ca66d3
Author: Quy Tonthat <qtonthat@gmail.com>
Date:   Sun May 13 21:41:45 2007 +1000

    RPM spec: include files in technical/ to package.
    
    Not only that they are interesting to users, some of the
    files are linked to by the included "Git User's Manual"
    
    Signed-off-by: Quy Tonthat <qtonthat@gmail.com>
    Signed-off-by: Junio C Hamano <junkio@cox.net>

commit 0ab311d60108f8d93dbcac53623e8e593901b5ea
Author: Matthieu Castet <castet.matthieu@free.fr>
Date:   Sun May 13 11:57:00 2007 -0700

    Remove stale non-static-inline prototype for tree_entry_extract()
    
    When 4651ece8 made the function a "static inline", it should
    have removd the stale prototype but everybody missed that.
    
    Thomas Glanzmann noticed this broke compilation with Forte12
    compiler on his Sun boxes.
    
    Signed-off-by: Junio C Hamano <junkio@cox.net>

commit b18a2be37a0de27902ad6491960ed910083b0310
Author: Steffen Prohaska <prohaska@zib.de>
Date:   Sun May 13 09:12:52 2007 +0200

    git-config: test for 'do not forget "a.b.var" ends "a.var" section'.
    
    Added test for mentioned bugfix.
    
    Signed-off-by: Steffen Prohaska <prohaska@zib.de>
    Signed-off-by: Junio C Hamano <junkio@cox.net>

commit ae9ee41de86cc98adad1a0c70651c55acc3fb699
Author: Junio C Hamano <junkio@cox.net>
Date:   Sat May 12 21:49:33 2007 -0700

    git-config: do not forget seeing "a.b.var" means we are out of "a.var" section.
    
    Earlier code tried to be half-careful and knew the logic that
    seeing "a.var" after seeing "a.b.var" is a sign of the previous
    "a.b." section has ended, but forgot it has to handle the other
    way.  Seeing "a.b.var" after seeing "a.var" is a sign that "a."
    section has ended, so a new "a.var2" variable should be added
    before the location "a.b.var" appears.
    
    Signed-off-by: Junio C Hamano <junkio@cox.net>

commit fdc99cbbdcdcf4ee2c336f02b7b2dbcb11696392
Author: Junio C Hamano <junkio@cox.net>
Date:   Thu Mar 29 01:02:50 2007 -0700

    checkout: allow detaching to HEAD even when switching to the tip of a branch
    
    You cannot currently checkout the tip of an existing branch
    without moving to the branch.
    
    This allows you to detach your HEAD and place it at such a
    commit, with:
    
        $ git checkout master^0
    
    Signed-off-by: Junio C Hamano <junkio@cox.net>

commit cbb84e5d174cf33fd4dcf3136de50a886ff9a2e2
Author: Jan Hudec <bulb@ucw.cz>
Date:   Sat May 12 19:11:13 2007 +0200

    Updated documentation of hooks in git-receive-pack.
    
    Added documentation of pre-receive and post-receive hooks and updated
    documentation of update and post-update hooks.
    
    [jc: with minor copy-editing]
    
    Signed-off-by: Jan Hudec <bulb@ucw.cz>
    Signed-off-by: Junio C Hamano <junkio@cox.net>

commit 96f12b54f7b2067d668a1ea578a1fc3773e31148
Author: Alex Riesen <raa.lkml@gmail.com>
Date:   Fri May 11 22:35:22 2007 +0200

    Allow fetching references from any namespace
    
    not only from the three defined: heads, tags and remotes.
    
    Noticed when I tried to fetch the references created by git-p4-import.bat:
    they are placed into separate namespace (refs/p4import/, to avoid showing
    them in git-branch output). As canon_refs_list_for_fetch always prepended
    refs/heads/ it was impossible, and annoying: it worked before. Normally,
    the p4import references are useless anywhere but in the directory managed
    by perforce, but in this special case the cloned directory was supposed
    to be a backup, including the p4import branch: it keeps information about
    where the imported perforce state came from.
    
    Signed-off-by: Alex Riesen <raa.lkml@gmail.com>
    Signed-off-by: Junio C Hamano <junkio@cox.net>

commit a6e3768f641c2703266422aa05c05f1d01e886b2
Author: Steffen Prohaska <prohaska@zib.de>
Date:   Sat May 12 13:32:34 2007 +0200

    tiny fix in documentation of git-clone
    
    path in example was missing '../'
    
    Signed-off-by: Steffen Prohaska <prohaska@zib.de>
    Signed-off-by: Junio C Hamano <junkio@cox.net>

commit 7e9116b1d8adef635ae900af7eff4b320390eeb3
Author: Marco Costalba <mcostalba@gmail.com>
Date:   Sat May 12 12:35:29 2007 +0200

    Fix an unmatched comment end in arm/sha1_arm.S
    
    Signed-off-by: Marco Costalba <mcostalba@gmail.com>
    Acked-by: Nicolas Pitre <nico@cam.org>
    Signed-off-by: Junio C Hamano <junkio@cox.net>

commit 419ca50e4c5afbf6a3f956db5531ed85f2b54bb9
Author: Richard P. Curnow <rc@rc0.org.uk>
Date:   Wed May 9 23:13:44 2007 +0100

    Fix documentation of tag in git-fast-import.txt
    
    The tag command does not take a trailing LF.
    
    Signed-off-by: Richard P. Curnow <rc@rc0.org.uk>
    Signed-off-by: Shawn O. Pearce <spearce@spearce.org>

commit b722b9585518c9d75ec5d8731cb90dc0c9fb918c
Author: Junio C Hamano <junkio@cox.net>
Date:   Thu May 10 13:24:21 2007 -0700

    .mailmap: add some aliases

commit e18ee576b1420e7b2cfc5c686872fa3b439ac45f
Author: Jari Aalto <jari.aalto@cante.net>
Date:   Mon Apr 30 21:37:57 2007 +0300

    SPECIFYING RANGES typo fix: it it => it is
    
    Signed-off-by: Jari Aalto <jari.aalto@cante.net>
    Signed-off-by: Junio C Hamano <junkio@cox.net>

commit c2f599e09fd0496413d1744b5b89b9b5c223555d
Author: Junio C Hamano <junkio@cox.net>
Date:   Wed May 9 17:11:15 2007 -0700

    git-clone: don't get fooled by $PWD
    
    If you have /home/me/git symlink pointing at /pub/git/mine,
    trying to clone from /pub/git/his/ using relative path would not
    work as expected:
    
    	$ cd /home/me
            $ cd git
            $ ls ../
            his    mine
            $ git clone -l -s -n ../his/stuff.git
    
    This is because "cd ../his/stuff.git" done inside git-clone to
    check if the repository is local is confused by $PWD, which is
    set to /home/me, and tries to go to /home/his/stuff.git which is
    different from /pub/git/his/stuff.git.
    
    We could probably say "set -P" (or "cd -P") instead, if we know
    the shell is POSIX, but the way the patch is coded is probably
    more portable.
    
    [jc: this is updated with Andy Whitcroft's improvements]
    
    Signed-off-by: Junio C Hamano <junkio@cox.net>

commit c69f4050958b648acd668b37dc77772e05148a97
Author: Richard P. Curnow <rc@rc0.org.uk>
Date:   Wed May 9 23:13:44 2007 +0100

    Fix documentation of tag in git-fast-import.txt
    
    The tag command does not take a trailing LF.
    
    Signed-off-by: Richard P. Curnow <rc@rc0.org.uk>
    Signed-off-by: Junio C Hamano <junkio@cox.net>

commit d966e6aa66d397908b4fbf69cef2e2da88737321
Author: Shawn O. Pearce <spearce@spearce.org>
Date:   Mon May 7 21:13:40 2007 -0400

    Properly handle '0' filenames in import-tars
    
    Randal L. Schwartz pointed out multiple times that we should be
    testing the length of the name string here, not if it is "true".
    The problem is the string '0' is actually false in Perl when we
    try to evaluate it in this context, as '0' is 0 numerically and
    the number 0 is treated as a false value.  This would cause us
    to break out of the import loop early if anyone had a file or
    directory named "0".
    
    Signed-off-by: Shawn O. Pearce <spearce@spearce.org>


 .mailmap                             |    4 ++
 Documentation/git-clone.txt          |    2 +-
 Documentation/git-fast-import.txt    |    1 -
 Documentation/git-rev-parse.txt      |    2 +-
 Documentation/hooks.txt              |   77 ++++++++++++++++++++++++++++++---
 arm/sha1_arm.S                       |    2 +-
 config.c                             |   28 ++++++++++--
 contrib/fast-import/import-tars.perl |    2 +-
 git-checkout.sh                      |    4 +-
 git-clone.sh                         |    9 ++++-
 git-parse-remote.sh                  |    4 +-
 git-svn.perl                         |   76 ++++++++++++++++++++-------------
 git.spec.in                          |    5 ++
 t/t1300-repo-config.sh               |   19 ++++++++
 t/t7201-co.sh                        |   63 +++++++++++++++++++++++++++-
 t/t9100-git-svn-basic.sh             |    2 +-
 t/t9104-git-svn-follow-parent.sh     |   13 +++---
 t/t9105-git-svn-commit-diff.sh       |    2 +-
 t/t9110-git-svn-use-svm-props.sh     |    7 ++-
 t/t9111-git-svn-use-svnsync-props.sh |    6 +-
 tree-walk.h                          |    1 -
 21 files changed, 262 insertions(+), 67 deletions(-)

diff --git a/.mailmap b/.mailmap
index 17e89af..4e0615e 100644
--- a/.mailmap
+++ b/.mailmap
@@ -35,7 +35,11 @@ Shawn O. Pearce <spearce@spearce.org>
 Theodore Ts'o <tytso@mit.edu>
 Tony Luck <tony.luck@intel.com>
 Uwe Kleine-König <zeisberg@informatik.uni-freiburg.de>
+Uwe Kleine-König <Uwe_Zeisberger@digi.com>
+Uwe Kleine-König <uzeisberger@io.fsforth.de>
+Uwe Kleine-König <ukleinek@informatik.uni-freiburg.de>
 Ville Skyttä <scop@xemacs.org>
 YOSHIFUJI Hideaki <yoshfuji@linux-ipv6.org>
 anonymous <linux@horizon.com>
 anonymous <linux@horizon.net>
+Dana L. How <how@deathvalley.cswitch.com>
diff --git a/Documentation/git-clone.txt b/Documentation/git-clone.txt
index 6d32c49..644bf12 100644
--- a/Documentation/git-clone.txt
+++ b/Documentation/git-clone.txt
@@ -132,7 +132,7 @@ Make a local clone that borrows from the current directory, without checking thi
 +
 ------------
 $ git clone -l -s -n . ../copy
-$ cd copy
+$ cd ../copy
 $ git show-branch
 ------------
 
diff --git a/Documentation/git-fast-import.txt b/Documentation/git-fast-import.txt
index eaba6fd..8d06775 100644
--- a/Documentation/git-fast-import.txt
+++ b/Documentation/git-fast-import.txt
@@ -548,7 +548,6 @@ lightweight (non-annotated) tags see the `reset` command below.
 	'from' SP <committish> LF
 	'tagger' SP <name> SP LT <email> GT SP <when> LF
 	data
-	LF
 ....
 
 where `<name>` is the name of the tag to create.
diff --git a/Documentation/git-rev-parse.txt b/Documentation/git-rev-parse.txt
index a8bf656..7757abe 100644
--- a/Documentation/git-rev-parse.txt
+++ b/Documentation/git-rev-parse.txt
@@ -255,7 +255,7 @@ reachable from `r1` from the set of commits reachable from
 A similar notation "`r1\...r2`" is called symmetric difference
 of `r1` and `r2` and is defined as
 "`r1 r2 --not $(git-merge-base --all r1 r2)`".
-It it the set of commits that are reachable from either one of
+It is the set of commits that are reachable from either one of
 `r1` or `r2` but not from both.
 
 Two other shorthands for naming a set that is formed by a commit
diff --git a/Documentation/hooks.txt b/Documentation/hooks.txt
index b083290..80ba670 100644
--- a/Documentation/hooks.txt
+++ b/Documentation/hooks.txt
@@ -90,6 +90,35 @@ parameter, and is invoked after a commit is made.
 This hook is meant primarily for notification, and cannot affect
 the outcome of `git-commit`.
 
+[[pre-receive]]
+pre-receive
+-----------
+
+This hook is invoked by `git-receive-pack` on the remote repository,
+which happens when a `git push` is done on a local repository.
+Just before starting to update refs on the remote repository, the
+pre-receive hook is invoked.  Its exit status determines the success
+or failure of the update.
+
+This hook executes once for the receive operation. It takes no
+arguments, but for each ref to be updated it receives on standard
+input a line of the format:
+
+  <old-value> SP <new-value> SP <ref-name> LF
+
+where `<old-value>` is the old object name stored in the ref,
+`<new-value>` is the new object name to be stored in the ref and
+`<ref-name>` is the full name of the ref.
+When creating a new ref, `<old-value>` is 40 `0`.
+
+If the hook exits with non-zero status, none of the refs will be
+updated. If the hook exits with zero, updating of individual refs can
+still be prevented by the <<update,'update'>> hook.
+
+If you want to report something to the `git-send-pack` on the other end,
+you can simply `echo` your messages.
+
+[[update]]
 update
 ------
 
@@ -108,7 +137,7 @@ three parameters:
 
 A zero exit from the update hook allows the ref to be updated.
 Exiting with a non-zero status prevents `git-receive-pack`
-from updating the ref.
+from updating that ref.
 
 This hook can be used to prevent 'forced' update on certain refs by
 making sure that the object name is a commit object that is a
@@ -117,7 +146,8 @@ That is, to enforce a "fast forward only" policy.
 
 It could also be used to log the old..new status.  However, it
 does not know the entire set of branches, so it would end up
-firing one e-mail per ref when used naively, though.
+firing one e-mail per ref when used naively, though.  The
+<<post-receive,'post-receive'>> hook is more suited to that.
 
 Another use suggested on the mailing list is to use this hook to
 implement access control which is finer grained than the one
@@ -127,9 +157,38 @@ The standard output of this hook is sent to `stderr`, so if you
 want to report something to the `git-send-pack` on the other end,
 you can simply `echo` your messages.
 
-The default 'update' hook, when enabled, demonstrates how to
-send out a notification e-mail.
+The default 'update' hook, when enabled--and with
+`hooks.allowunannotated` config option turned on--prevents
+unannotated tags to be pushed.
+
+[[post-receive]]
+post-receive
+------------
 
+This hook is invoked by `git-receive-pack` on the remote repository,
+which happens when a `git push` is done on a local repository.
+It executes on the remote repository once after all the refs have
+been updated.
+
+This hook executes once for the receive operation.  It takes no
+arguments, but gets the same information as the `pre-receive`
+hook does on its standard input.
+
+This hook does not affect the outcome of `git-receive-pack`, as it
+is called after the real work is done.
+
+This supersedes the [[post-update]] hook in that it actually get's
+both old and new values of all the refs.
+
+If you want to report something to the `git-send-pack` on the
+other end, you can simply `echo` your messages.
+
+The default 'post-receive' hook is empty, but there is
+a sample script `post-receive-email` provided in the `contrib/hooks`
+directory in git distribution, which implements sending commit
+emails.
+
+[[post-update]]
 post-update
 -----------
 
@@ -148,12 +207,16 @@ The 'post-update' hook can tell what are the heads that were pushed,
 but it does not know what their original and updated values are,
 so it is a poor place to do log old..new.
 
+In general, `post-receive` hook is preferred when the hook needs
+to decide its acion on the status of the entire set of refs
+being updated, as this hook is called once per ref, with
+information only on a single ref at a time.
+
 When enabled, the default 'post-update' hook runs
 `git-update-server-info` to keep the information used by dumb
 transports (e.g., HTTP) up-to-date.  If you are publishing
 a git repository that is accessible via HTTP, you should
 probably enable this hook.
 
-The standard output of this hook is sent to `/dev/null`; if you
-want to report something to the `git-send-pack` on the other end,
-you can redirect your output to your `stderr`.
+Both standard output and standard error output are forwarded to
+`git-send-pack` on the other end.
diff --git a/arm/sha1_arm.S b/arm/sha1_arm.S
index da92d20..a328b73 100644
--- a/arm/sha1_arm.S
+++ b/arm/sha1_arm.S
@@ -23,7 +23,7 @@ sha_transform:
 	stmfd	sp!, {r4 - r8, lr}
 
 	@ for (i = 0; i < 16; i++)
-	@         W[i] = ntohl(((uint32_t *)data)[i]); */
+	@         W[i] = ntohl(((uint32_t *)data)[i]);
 
 #ifdef __ARMEB__
 	mov	r4, r0
diff --git a/config.c b/config.c
index 70d1055..7b655fd 100644
--- a/config.c
+++ b/config.c
@@ -451,6 +451,9 @@ static int matches(const char* key, const char* value)
 
 static int store_aux(const char* key, const char* value)
 {
+	const char *ep;
+	size_t section_len;
+
 	switch (store.state) {
 	case KEY_SEEN:
 		if (matches(key, value)) {
@@ -468,12 +471,29 @@ static int store_aux(const char* key, const char* value)
 		}
 		break;
 	case SECTION_SEEN:
-		if (strncmp(key, store.key, store.baselen+1)) {
+		/*
+		 * What we are looking for is in store.key (both
+		 * section and var), and its section part is baselen
+		 * long.  We found key (again, both section and var).
+		 * We would want to know if this key is in the same
+		 * section as what we are looking for.  We already
+		 * know we are in the same section as what should
+		 * hold store.key.
+		 */
+		ep = strrchr(key, '.');
+		section_len = ep - key;
+
+		if ((section_len != store.baselen) ||
+		    memcmp(key, store.key, section_len+1)) {
 			store.state = SECTION_END_SEEN;
 			break;
-		} else
-			/* do not increment matches: this is no match */
-			store.offset[store.seen] = ftell(config_file);
+		}
+
+		/*
+		 * Do not increment matches: this is no match, but we
+		 * just made sure we are in the desired section.
+		 */
+		store.offset[store.seen] = ftell(config_file);
 		/* fallthru */
 	case SECTION_END_SEEN:
 	case START:
diff --git a/contrib/fast-import/import-tars.perl b/contrib/fast-import/import-tars.perl
index e464920..f0b9a43 100755
--- a/contrib/fast-import/import-tars.perl
+++ b/contrib/fast-import/import-tars.perl
@@ -51,7 +51,7 @@ foreach my $tar_file (@ARGV)
 			$prefix) = unpack 'Z100 Z8 Z8 Z8 Z12 Z12
 			Z8 Z1 Z100 Z6
 			Z2 Z32 Z32 Z8 Z8 Z*', $_;
-		last unless $name;
+		last unless length($name);
 		if ($name eq '././@LongLink') {
 			# GNU tar extension
 			if (read(I, $_, 512) != 512) {
diff --git a/git-checkout.sh b/git-checkout.sh
index a7390e8..deb0a9a 100755
--- a/git-checkout.sh
+++ b/git-checkout.sh
@@ -170,7 +170,7 @@ describe_detached_head () {
 	}
 }
 
-if test -z "$branch$newbranch" && test "$new" != "$old"
+if test -z "$branch$newbranch" && test "$new_name" != "$old_name"
 then
 	detached="$new"
 	if test -n "$oldbranch" && test -z "$quiet"
@@ -180,7 +180,7 @@ If you want to create a new branch from this checkout, you may do so
 (now or later) by using -b with the checkout command again. Example:
   git checkout -b <new_branch_name>"
 	fi
-elif test -z "$oldbranch"
+elif test -z "$oldbranch" && test "$new" != "$old"
 then
 	describe_detached_head 'Previous HEAD position was' "$old"
 fi
diff --git a/git-clone.sh b/git-clone.sh
index cad5c0c..70374aa 100755
--- a/git-clone.sh
+++ b/git-clone.sh
@@ -18,7 +18,14 @@ usage() {
 }
 
 get_repo_base() {
-	(cd "$1" && (cd .git ; pwd)) 2> /dev/null
+	(
+		cd "`/bin/pwd`" &&
+		cd "$1" &&
+		{
+			cd .git 2>/dev/null
+			pwd
+		}
+	)
 }
 
 if [ -n "$GIT_SSL_NO_VERIFY" ]; then
diff --git a/git-parse-remote.sh b/git-parse-remote.sh
index 437b0c3..0506b12 100755
--- a/git-parse-remote.sh
+++ b/git-parse-remote.sh
@@ -143,13 +143,13 @@ canon_refs_list_for_fetch () {
 		fi
 		case "$remote" in
 		'' | HEAD ) remote=HEAD ;;
-		refs/heads/* | refs/tags/* | refs/remotes/*) ;;
+		refs/*) ;;
 		heads/* | tags/* | remotes/* ) remote="refs/$remote" ;;
 		*) remote="refs/heads/$remote" ;;
 		esac
 		case "$local" in
 		'') local= ;;
-		refs/heads/* | refs/tags/* | refs/remotes/*) ;;
+		refs/*) ;;
 		heads/* | tags/* | remotes/* ) local="refs/$local" ;;
 		*) local="refs/heads/$local" ;;
 		esac
diff --git a/git-svn.perl b/git-svn.perl
index 3c4f490..f4c9ff1 100755
--- a/git-svn.perl
+++ b/git-svn.perl
@@ -80,6 +80,7 @@ my %icv;
 my %init_opts = ( 'template=s' => \$_template, 'shared:s' => \$_shared,
                   'trunk|T=s' => \$_trunk, 'tags|t=s' => \$_tags,
                   'branches|b=s' => \$_branches, 'prefix=s' => \$_prefix,
+                  'minimize-url|m' => \$Git::SVN::_minimize_url,
 		  'no-metadata' => sub { $icv{noMetadata} = 1 },
 		  'use-svm-props' => sub { $icv{useSvmProps} = 1 },
 		  'use-svnsync-props' => sub { $icv{useSvnsyncProps} = 1 },
@@ -393,7 +394,7 @@ sub cmd_dcommit {
 		} else {
 			my %ed_opts = ( r => $last_rev,
 			                log => get_commit_entry($d)->{log},
-			                ra => Git::SVN::Ra->new($url),
+			                ra => Git::SVN::Ra->new($gs->full_url),
 			                tree_a => "$d~1",
 			                tree_b => $d,
 			                editor_cb => sub {
@@ -820,7 +821,7 @@ use strict;
 use warnings;
 use vars qw/$default_repo_id $default_ref_id $_no_metadata $_follow_parent
             $_repack $_repack_flags $_use_svm_props $_head
-            $_use_svnsync_props $no_reuse_existing/;
+            $_use_svnsync_props $no_reuse_existing $_minimize_url/;
 use Carp qw/croak/;
 use File::Path qw/mkpath/;
 use File::Copy qw/copy/;
@@ -1037,7 +1038,7 @@ sub init_remote_config {
 				     "[svn-remote \"$existing\"]\n";
 		}
 		$self->{repo_id} = $existing;
-	} else {
+	} elsif ($_minimize_url) {
 		my $min_url = Git::SVN::Ra->new($url)->minimize_url;
 		$existing = find_existing_remote($min_url, $r);
 		if ($existing) {
@@ -1390,7 +1391,7 @@ sub traverse_ignore {
 		}
 	}
 	foreach (sort keys %$dirent) {
-		next if $dirent->{$_}->kind != $SVN::Node::dir;
+		next if $dirent->{$_}->{kind} != $SVN::Node::dir;
 		$self->traverse_ignore($fh, "$path/$_", $r);
 	}
 }
@@ -2888,7 +2889,7 @@ my ($can_do_switch, %ignored_err, $RA);
 BEGIN {
 	# enforce temporary pool usage for some simple functions
 	my $e;
-	foreach (qw/get_latest_revnum get_uuid get_repos_root/) {
+	foreach (qw/rev_proplist get_latest_revnum get_uuid get_repos_root/) {
 		$e .= "sub $_ {
 			my \$self = shift;
 			my \$pool = SVN::Pool->new;
@@ -2897,36 +2898,13 @@ BEGIN {
 			wantarray ? \@ret : \$ret[0]; }\n";
 	}
 
-	# get_dir needs $pool held in cache for dirents to work,
-	# check_path is cacheable and rev_proplist is close enough
-	# for our purposes.
-	foreach (qw/check_path get_dir rev_proplist/) {
-		$e .= "my \%${_}_cache; my \$${_}_rev = 0; sub $_ {
-			my \$self = shift;
-			my \$r = pop;
-			my \$k = join(\"\\0\", \@_);
-			if (my \$x = \$${_}_cache{\$r}->{\$k}) {
-				return wantarray ? \@\$x : \$x->[0];
-			}
-			my \$pool = SVN::Pool->new;
-			my \@ret = \$self->SUPER::$_(\@_, \$r, \$pool);
-			if (\$r != \$${_}_rev) {
-				\%${_}_cache = ( pool => [] );
-				\$${_}_rev = \$r;
-			}
-			\$${_}_cache{\$r}->{\$k} = \\\@ret;
-			push \@{\$${_}_cache{pool}}, \$pool;
-			wantarray ? \@ret : \$ret[0]; }\n";
-	}
-	$e .= "\n1;";
-	eval $e or die $@;
+	eval "$e; 1;" or die $@;
 }
 
 sub new {
 	my ($class, $url) = @_;
 	$url =~ s!/+$!!;
 	return $RA if ($RA && $RA->{url} eq $url);
-	$RA->{pool}->clear if $RA;
 
 	SVN::_Core::svn_config_ensure($config_dir, undef);
 	my ($baton, $callbacks) = SVN::Core::auth_open_helper([
@@ -2952,9 +2930,47 @@ sub new {
 	$self->{svn_path} = $url;
 	$self->{repos_root} = $self->get_repos_root;
 	$self->{svn_path} =~ s#^\Q$self->{repos_root}\E(/|$)##;
+	$self->{cache} = { check_path => { r => 0, data => {} },
+	                   get_dir => { r => 0, data => {} } };
 	$RA = bless $self, $class;
 }
 
+sub check_path {
+	my ($self, $path, $r) = @_;
+	my $cache = $self->{cache}->{check_path};
+	if ($r == $cache->{r} && exists $cache->{data}->{$path}) {
+		return $cache->{data}->{$path};
+	}
+	my $pool = SVN::Pool->new;
+	my $t = $self->SUPER::check_path($path, $r, $pool);
+	$pool->clear;
+	if ($r != $cache->{r}) {
+		%{$cache->{data}} = ();
+		$cache->{r} = $r;
+	}
+	$cache->{data}->{$path} = $t;
+}
+
+sub get_dir {
+	my ($self, $dir, $r) = @_;
+	my $cache = $self->{cache}->{get_dir};
+	if ($r == $cache->{r}) {
+		if (my $x = $cache->{data}->{$dir}) {
+			return wantarray ? @$x : $x->[0];
+		}
+	}
+	my $pool = SVN::Pool->new;
+	my ($d, undef, $props) = $self->SUPER::get_dir($dir, $r, $pool);
+	my %dirents = map { $_ => { kind => $d->{$_}->kind } } keys %$d;
+	$pool->clear;
+	if ($r != $cache->{r}) {
+		%{$cache->{data}} = ();
+		$cache->{r} = $r;
+	}
+	$cache->{data}->{$dir} = [ \%dirents, $r, $props ];
+	wantarray ? (\%dirents, $r, $props) : \%dirents;
+}
+
 sub DESTROY {
 	# do not call the real DESTROY since we store ourselves in $RA
 }
@@ -3169,7 +3185,7 @@ sub match_globs {
 		return unless scalar @x == 3;
 		my $dirents = $x[0];
 		foreach my $de (keys %$dirents) {
-			next if $dirents->{$de}->kind != $SVN::Node::dir;
+			next if $dirents->{$de}->{kind} != $SVN::Node::dir;
 			my $p = $g->{path}->full_path($de);
 			next if $exists->{$p};
 			next if (length $g->{path}->{right} &&
diff --git a/git.spec.in b/git.spec.in
index b0ea628..2170424 100644
--- a/git.spec.in
+++ b/git.spec.in
@@ -167,8 +167,13 @@ rm -rf $RPM_BUILD_ROOT
 %{_datadir}/git-core/
 %doc README COPYING Documentation/*.txt
 %{!?_without_docs: %doc Documentation/*.html Documentation/howto}
+%{!?_without_docs: %doc Documentation/technical}
 
 %changelog
+* Tue May 13 2007 Quy Tonthat <qtonthat@gmail.com>
+- Added lib files for git-gui
+- Added Documentation/technical (As needed by Git Users Manual)
+
 * Tue May 8 2007 Quy Tonthat <qtonthat@gmail.com>
 - Added howto files
 
diff --git a/t/t1300-repo-config.sh b/t/t1300-repo-config.sh
index 78c2e08..a1d777c 100755
--- a/t/t1300-repo-config.sh
+++ b/t/t1300-repo-config.sh
@@ -407,6 +407,25 @@ EOF
 test_expect_success "section was removed properly" \
 	"git diff -u expect .git/config"
 
+rm .git/config
+
+cat > expect << EOF
+[gitcvs]
+	enabled = true
+	dbname = %Ggitcvs2.%a.%m.sqlite
+[gitcvs "ext"]
+	dbname = %Ggitcvs1.%a.%m.sqlite
+EOF
+
+test_expect_success 'section ending' '
+
+	git-config gitcvs.enabled true &&
+	git-config gitcvs.ext.dbname %Ggitcvs1.%a.%m.sqlite &&
+	git-config gitcvs.dbname %Ggitcvs2.%a.%m.sqlite &&
+	cmp .git/config expect
+
+'
+
 test_expect_success numbers '
 
 	git-config kilo.gram 1k &&
diff --git a/t/t7201-co.sh b/t/t7201-co.sh
index 867bbd2..5fa6a45 100755
--- a/t/t7201-co.sh
+++ b/t/t7201-co.sh
@@ -3,7 +3,20 @@
 # Copyright (c) 2006 Junio C Hamano
 #
 
-test_description='git-checkout tests.'
+test_description='git-checkout tests.
+
+Creates master, forks renamer and side branches from it.
+Test switching across them.
+
+  ! [master] Initial A one, A two
+   * [renamer] Renamer R one->uno, M two
+    ! [side] Side M one, D two, A three
+  ---
+    + [side] Side M one, D two, A three
+   *  [renamer] Renamer R one->uno, M two
+  +*+ [master] Initial A one, A two
+
+'
 
 . ./test-lib.sh
 
@@ -129,4 +142,52 @@ test_expect_success 'checkout -m with merge conflict' '
 	! test -s current
 '
 
+test_expect_success 'checkout to detach HEAD' '
+
+	git checkout -f renamer && git clean &&
+	git checkout renamer^ &&
+	H=$(git rev-parse --verify HEAD) &&
+	M=$(git show-ref -s --verify refs/heads/master) &&
+	test "z$H" = "z$M" &&
+	if git symbolic-ref HEAD >/dev/null 2>&1
+	then
+		echo "OOPS, HEAD is still symbolic???"
+		false
+	else
+		: happy
+	fi
+'
+
+test_expect_success 'checkout to detach HEAD with branchname^' '
+
+	git checkout -f master && git clean &&
+	git checkout renamer^ &&
+	H=$(git rev-parse --verify HEAD) &&
+	M=$(git show-ref -s --verify refs/heads/master) &&
+	test "z$H" = "z$M" &&
+	if git symbolic-ref HEAD >/dev/null 2>&1
+	then
+		echo "OOPS, HEAD is still symbolic???"
+		false
+	else
+		: happy
+	fi
+'
+
+test_expect_success 'checkout to detach HEAD with HEAD^0' '
+
+	git checkout -f master && git clean &&
+	git checkout HEAD^0 &&
+	H=$(git rev-parse --verify HEAD) &&
+	M=$(git show-ref -s --verify refs/heads/master) &&
+	test "z$H" = "z$M" &&
+	if git symbolic-ref HEAD >/dev/null 2>&1
+	then
+		echo "OOPS, HEAD is still symbolic???"
+		false
+	else
+		: happy
+	fi
+'
+
 test_done
diff --git a/t/t9100-git-svn-basic.sh b/t/t9100-git-svn-basic.sh
index eb628fe..70c3669 100755
--- a/t/t9100-git-svn-basic.sh
+++ b/t/t9100-git-svn-basic.sh
@@ -229,7 +229,7 @@ test_expect_failure 'exit if init-ing a would clobber a URL' "
 
 test_expect_success \
   'init allows us to connect to another directory in the same repo' "
-        git-svn init -i bar $svnrepo/bar &&
+        git-svn init --minimize-url -i bar $svnrepo/bar &&
         git config --get svn-remote.svn.fetch \
                               '^bar:refs/remotes/bar$' &&
         git config --get svn-remote.svn.fetch \
diff --git a/t/t9104-git-svn-follow-parent.sh b/t/t9104-git-svn-follow-parent.sh
index bd4f366..35aa45c 100755
--- a/t/t9104-git-svn-follow-parent.sh
+++ b/t/t9104-git-svn-follow-parent.sh
@@ -28,7 +28,7 @@ test_expect_success 'initialize repo' "
 	"
 
 test_expect_success 'init and fetch a moved directory' "
-	git-svn init -i thunk $svnrepo/thunk &&
+	git-svn init --minimize-url -i thunk $svnrepo/thunk &&
 	git-svn fetch -i thunk &&
 	test \"\`git-rev-parse --verify refs/remotes/thunk@2\`\" \
            = \"\`git-rev-parse --verify refs/remotes/thunk~1\`\" &&
@@ -68,7 +68,8 @@ test_expect_success 'follow larger parent' "
         echo hi > import/trunk/thunk/bump/thud/file &&
         svn import -m 'import a larger parent' import $svnrepo/larger-parent &&
         svn cp -m 'hi' $svnrepo/larger-parent $svnrepo/another-larger &&
-        git-svn init -i larger $svnrepo/another-larger/trunk/thunk/bump/thud &&
+        git-svn init --minimize-url -i larger \
+          $svnrepo/another-larger/trunk/thunk/bump/thud &&
         git-svn fetch -i larger &&
         git-rev-parse --verify refs/remotes/larger &&
         git-rev-parse --verify \
@@ -90,14 +91,14 @@ test_expect_success 'follow higher-level parent' "
                 cd ..
         svn mkdir -m 'new glob at top level' $svnrepo/glob &&
         svn mv -m 'move blob down a level' $svnrepo/blob $svnrepo/glob/blob &&
-        git-svn init -i blob $svnrepo/glob/blob &&
+        git-svn init --minimize-url -i blob $svnrepo/glob/blob &&
         git-svn fetch -i blob
         "
 
 test_expect_success 'follow deleted directory' "
 	svn mv -m 'bye!' $svnrepo/glob/blob/hi $svnrepo/glob/blob/bye &&
 	svn rm -m 'remove glob' $svnrepo/glob &&
-	git-svn init -i glob $svnrepo/glob &&
+	git-svn init --minimize-url -i glob $svnrepo/glob &&
 	git-svn fetch -i glob &&
 	test \"\`git cat-file blob refs/remotes/glob:blob/bye\`\" = hi &&
 	test \"\`git ls-tree refs/remotes/glob | wc -l \`\" -eq 1
@@ -127,7 +128,7 @@ test_expect_success 'follow-parent avoids deleting relevant info' "
 	  poke native/t/c.t &&
 	  svn commit -m 'reorg test' &&
 	cd .. &&
-	git-svn init -i r9270-t \
+	git-svn init --minimize-url -i r9270-t \
 	  $svnrepo/r9270/trunk/subversion/bindings/swig/perl/native/t &&
 	git-svn fetch -i r9270-t &&
 	test \`git rev-list r9270-t | wc -l\` -eq 2 &&
@@ -137,7 +138,7 @@ test_expect_success 'follow-parent avoids deleting relevant info' "
 
 test_expect_success "track initial change if it was only made to parent" "
 	svn cp -m 'wheee!' $svnrepo/r9270/trunk $svnrepo/r9270/drunk &&
-	git-svn init -i r9270-d \
+	git-svn init --minimize-url -i r9270-d \
 	  $svnrepo/r9270/drunk/subversion/bindings/swig/perl/native/t &&
 	git-svn fetch -i r9270-d &&
 	test \`git rev-list r9270-d | wc -l\` -eq 3 &&
diff --git a/t/t9105-git-svn-commit-diff.sh b/t/t9105-git-svn-commit-diff.sh
index c668dd1..318e172 100755
--- a/t/t9105-git-svn-commit-diff.sh
+++ b/t/t9105-git-svn-commit-diff.sh
@@ -33,7 +33,7 @@ test_expect_success 'test the commit-diff command' "
 
 test_expect_success 'commit-diff to a sub-directory (with git-svn config)' "
 	svn import -m 'sub-directory' import $svnrepo/subdir &&
-	git-svn init $svnrepo/subdir &&
+	git-svn init --minimize-url $svnrepo/subdir &&
 	git-svn fetch &&
 	git-svn commit-diff -r3 '$prev' '$head' &&
 	svn cat $svnrepo/subdir/readme > readme.2 &&
diff --git a/t/t9110-git-svn-use-svm-props.sh b/t/t9110-git-svn-use-svm-props.sh
index 9db0d8f..59e17f2 100755
--- a/t/t9110-git-svn-use-svm-props.sh
+++ b/t/t9110-git-svn-use-svm-props.sh
@@ -9,9 +9,10 @@ test_description='git-svn useSvmProps test'
 
 test_expect_success 'load svm repo' "
 	svnadmin load -q $rawsvnrepo < ../t9110/svm.dump &&
-	git-svn init -R arr -i bar $svnrepo/mirror/arr &&
-	git-svn init -R argh -i dir $svnrepo/mirror/argh &&
-	git-svn init -R argh -i e $svnrepo/mirror/argh/a/b/c/d/e &&
+	git-svn init --minimize-url -R arr -i bar $svnrepo/mirror/arr &&
+	git-svn init --minimize-url -R argh -i dir $svnrepo/mirror/argh &&
+	git-svn init --minimize-url -R argh -i e \
+	  $svnrepo/mirror/argh/a/b/c/d/e &&
 	git-config svn.useSvmProps true &&
 	git-svn fetch --all
 	"
diff --git a/t/t9111-git-svn-use-svnsync-props.sh b/t/t9111-git-svn-use-svnsync-props.sh
index 483d7f8..e523214 100755
--- a/t/t9111-git-svn-use-svnsync-props.sh
+++ b/t/t9111-git-svn-use-svnsync-props.sh
@@ -9,9 +9,9 @@ test_description='git-svn useSvnsyncProps test'
 
 test_expect_success 'load svnsync repo' "
 	svnadmin load -q $rawsvnrepo < ../t9111/svnsync.dump &&
-	git-svn init -R arr -i bar $svnrepo/bar &&
-	git-svn init -R argh -i dir $svnrepo/dir &&
-	git-svn init -R argh -i e $svnrepo/dir/a/b/c/d/e &&
+	git-svn init --minimize-url -R arr -i bar $svnrepo/bar &&
+	git-svn init --minimize-url -R argh -i dir $svnrepo/dir &&
+	git-svn init --minimize-url -R argh -i e $svnrepo/dir/a/b/c/d/e &&
 	git-config svn.useSvnsyncProps true &&
 	git-svn fetch --all
 	"
diff --git a/tree-walk.h b/tree-walk.h
index 43458cf..ee747ab 100644
--- a/tree-walk.h
+++ b/tree-walk.h
@@ -27,7 +27,6 @@ static inline int tree_entry_len(const char *name, const unsigned char *sha1)
 
 void update_tree_entry(struct tree_desc *);
 void init_tree_desc(struct tree_desc *desc, const void *buf, unsigned long size);
-const unsigned char *tree_entry_extract(struct tree_desc *, const char **, unsigned int *);
 
 /* Helper function that does both of the above and returns true for success */
 int tree_entry(struct tree_desc *, struct name_entry *);
